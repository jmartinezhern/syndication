// Code generated by MockGen. DO NOT EDIT.
// Source: entries.go

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/jmartinezhern/syndication/models"
)

// MockEntries is a mock of Entries interface.
type MockEntries struct {
	ctrl     *gomock.Controller
	recorder *MockEntriesMockRecorder
}

// MockEntriesMockRecorder is the mock recorder for MockEntries.
type MockEntriesMockRecorder struct {
	mock *MockEntries
}

// NewMockEntries creates a new mock instance.
func NewMockEntries(ctrl *gomock.Controller) *MockEntries {
	mock := &MockEntries{ctrl: ctrl}
	mock.recorder = &MockEntriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntries) EXPECT() *MockEntriesMockRecorder {
	return m.recorder
}

// Entries mocks base method.
func (m *MockEntries) Entries(userID string, page models.Page) ([]models.Entry, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Entries", userID, page)
	ret0, _ := ret[0].([]models.Entry)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Entries indicates an expected call of Entries.
func (mr *MockEntriesMockRecorder) Entries(userID, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entries", reflect.TypeOf((*MockEntries)(nil).Entries), userID, page)
}

// Entry mocks base method.
func (m *MockEntries) Entry(userID, id string) (models.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Entry", userID, id)
	ret0, _ := ret[0].(models.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Entry indicates an expected call of Entry.
func (mr *MockEntriesMockRecorder) Entry(userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entry", reflect.TypeOf((*MockEntries)(nil).Entry), userID, id)
}

// Mark mocks base method.
func (m *MockEntries) Mark(userID, id string, marker models.Marker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mark", userID, id, marker)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mark indicates an expected call of Mark.
func (mr *MockEntriesMockRecorder) Mark(userID, id, marker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mark", reflect.TypeOf((*MockEntries)(nil).Mark), userID, id, marker)
}

// MarkAll mocks base method.
func (m *MockEntries) MarkAll(userID string, marker models.Marker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkAll", userID, marker)
}

// MarkAll indicates an expected call of MarkAll.
func (mr *MockEntriesMockRecorder) MarkAll(userID, marker interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAll", reflect.TypeOf((*MockEntries)(nil).MarkAll), userID, marker)
}

// Stats mocks base method.
func (m *MockEntries) Stats(userID string) models.Stats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats", userID)
	ret0, _ := ret[0].(models.Stats)
	return ret0
}

// Stats indicates an expected call of Stats.
func (mr *MockEntriesMockRecorder) Stats(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockEntries)(nil).Stats), userID)
}
